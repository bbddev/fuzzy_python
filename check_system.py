"""
SCRIPT KI·ªÇM TRA H·ªÜ TH·ªêNG
========================
Ch·∫°y file n√†y ƒë·ªÉ ki·ªÉm tra xem h·ªá th·ªëng c√≥ ho·∫°t ƒë·ªông ƒë√∫ng kh√¥ng
"""

import sys


def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    print("\n1. Ki·ªÉm tra phi√™n b·∫£n Python...")
    version = sys.version_info
    print(f"   Phi√™n b·∫£n hi·ªán t·∫°i: Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major >= 3 and version.minor >= 8:
        print("   ‚úì Python version h·ª£p l·ªá (>=3.8)")
        return True
    else:
        print("   ‚úó C·∫ßn Python 3.8 tr·ªü l√™n!")
        return False


def check_libraries():
    """Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt"""
    print("\n2. Ki·ªÉm tra c√°c th∆∞ vi·ªán...")
    
    required_libs = {
        'numpy': 'NumPy',
        'skfuzzy': 'Scikit-fuzzy',
        'matplotlib': 'Matplotlib',
        'pandas': 'Pandas',
        'seaborn': 'Seaborn'
    }
    
    all_ok = True
    
    for lib_name, display_name in required_libs.items():
        try:
            if lib_name == 'skfuzzy':
                __import__('skfuzzy')
            else:
                __import__(lib_name)
            print(f"   ‚úì {display_name} ƒë√£ c√†i ƒë·∫∑t")
        except ImportError:
            print(f"   ‚úó {display_name} ch∆∞a c√†i ƒë·∫∑t!")
            print(f"      Ch·∫°y: pip install {lib_name if lib_name != 'skfuzzy' else 'scikit-fuzzy'}")
            all_ok = False
    
    return all_ok


def check_fuzzy_system():
    """Ki·ªÉm tra h·ªá th·ªëng m·ªù c√≥ ch·∫°y ƒë∆∞·ª£c kh√¥ng"""
    print("\n3. Ki·ªÉm tra h·ªá th·ªëng m·ªù...")
    
    try:
        from fuzzy_shopping_system import ShoppingTrendFuzzySystem
        print("   ‚úì Import module th√†nh c√¥ng")
        
        # Th·ª≠ kh·ªüi t·∫°o h·ªá th·ªëng (b·ªè output)
        import sys
        import io
        
        # Chuy·ªÉn output sang null ƒë·ªÉ kh√¥ng in ra
        old_stdout = sys.stdout
        sys.stdout = io.StringIO()
        
        system = ShoppingTrendFuzzySystem()
        
        # Kh√¥i ph·ª•c output
        sys.stdout = old_stdout
        
        print("   ‚úì Kh·ªüi t·∫°o h·ªá th·ªëng th√†nh c√¥ng")
        
        # Test m·ªôt d·ª± ƒëo√°n ƒë∆°n gi·∫£n
        result = system.predict(50, 5, 50)
        
        if 0 <= result <= 100:
            print(f"   ‚úì D·ª± ƒëo√°n ho·∫°t ƒë·ªông (k·∫øt qu·∫£: {result:.2f})")
            return True
        else:
            print(f"   ‚úó K·∫øt qu·∫£ b·∫•t th∆∞·ªùng: {result}")
            return False
            
    except Exception as e:
        print(f"   ‚úó L·ªói: {e}")
        return False


def check_test_script():
    """Ki·ªÉm tra script test c√≥ ch·∫°y ƒë∆∞·ª£c kh√¥ng"""
    print("\n4. Ki·ªÉm tra script test...")
    
    try:
        # Ch·ªâ ki·ªÉm tra import, kh√¥ng ch·∫°y test
        import test_system
        print("   ‚úì File test_system.py h·ª£p l·ªá")
        return True
    except Exception as e:
        print(f"   ‚úó L·ªói trong test_system.py: {e}")
        return False


def check_visualize_script():
    """Ki·ªÉm tra script v·∫Ω bi·ªÉu ƒë·ªì"""
    print("\n5. Ki·ªÉm tra script visualize...")
    
    try:
        import visualize_results
        print("   ‚úì File visualize_results.py h·ª£p l·ªá")
        return True
    except Exception as e:
        print(f"   ‚úó L·ªói trong visualize_results.py: {e}")
        return False


def run_quick_test():
    """Ch·∫°y test nhanh v·ªõi m·ªôt s·ªë gi√° tr·ªã"""
    print("\n6. Ch·∫°y test nhanh...")
    
    try:
        import sys
        import io
        from fuzzy_shopping_system import ShoppingTrendFuzzySystem
        
        # T·∫Øt output khi kh·ªüi t·∫°o
        old_stdout = sys.stdout
        sys.stdout = io.StringIO()
        system = ShoppingTrendFuzzySystem()
        sys.stdout = old_stdout
        
        test_cases = [
            (10, 2, 10),    # N√™n cho k·∫øt qu·∫£ th·∫•p
            (50, 5, 50),    # N√™n cho k·∫øt qu·∫£ trung b√¨nh
            (90, 9, 90),    # N√™n cho k·∫øt qu·∫£ cao
        ]
        
        all_passed = True
        
        for i, (view, cat, disc) in enumerate(test_cases, 1):
            result = system.predict(view, cat, disc)
            trend = system.interpret_result(result)
            
            print(f"   Test {i}: view={view}, cat={cat}, disc={disc}")
            print(f"           ‚Üí K·∫øt qu·∫£: {result:.2f} ({trend})")
            
            # Ki·ªÉm tra logic c∆° b·∫£n
            if i == 1 and result >= 50:
                print(f"           ‚ö†Ô∏è  C·∫£nh b√°o: K·∫øt qu·∫£ cao b·∫•t th∆∞·ªùng cho input th·∫•p")
                all_passed = False
            elif i == 3 and result <= 50:
                print(f"           ‚ö†Ô∏è  C·∫£nh b√°o: K·∫øt qu·∫£ th·∫•p b·∫•t th∆∞·ªùng cho input cao")
                all_passed = False
        
        if all_passed:
            print("   ‚úì T·∫•t c·∫£ test ƒë·ªÅu h·ª£p l√Ω")
        
        return all_passed
        
    except Exception as e:
        print(f"   ‚úó L·ªói khi ch·∫°y test: {e}")
        return False


def main():
    """H√†m ch√≠nh"""
    print("=" * 70)
    print("KI·ªÇM TRA H·ªÜ TH·ªêNG M·ªú PH√ÇN T√çCH XU H∆Ø·ªöNG MUA S·∫ÆM")
    print("=" * 70)
    
    results = []
    
    # Ch·∫°y c√°c ki·ªÉm tra
    results.append(("Python version", check_python_version()))
    results.append(("Th∆∞ vi·ªán", check_libraries()))
    results.append(("H·ªá th·ªëng m·ªù", check_fuzzy_system()))
    results.append(("Script test", check_test_script()))
    results.append(("Script visualize", check_visualize_script()))
    results.append(("Test nhanh", run_quick_test()))
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 70)
    print("K·∫æT QU·∫¢ KI·ªÇM TRA")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"\nƒê√£ pass: {passed}/{total} ki·ªÉm tra")
    
    for name, result in results:
        status = "‚úì PASS" if result else "‚úó FAIL"
        print(f"  {status} - {name}")
    
    print("\n" + "-" * 70)
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ KI·ªÇM TRA ƒê·ªÄU PASS!")
        print("H·ªá th·ªëng s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng.")
        print("\nB∆∞·ªõc ti·∫øp theo:")
        print("  1. Ch·∫°y: python fuzzy_shopping_system.py")
        print("  2. Ch·∫°y: python test_system.py")
        print("  3. Ch·∫°y: python visualize_results.py")
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è  H·ªÜ TH·ªêNG C√ì TH·ªÇ HO·∫†T ƒê·ªòNG")
        print("M·ªôt s·ªë ki·ªÉm tra fail nh∆∞ng kh√¥ng nghi√™m tr·ªçng.")
        print("B·∫°n c√≥ th·ªÉ th·ª≠ ch·∫°y c√°c script ch√≠nh.")
    else:
        print("‚ùå H·ªÜ TH·ªêNG C√ì V·∫§N ƒê·ªÄ")
        print("C·∫ßn kh·∫Øc ph·ª•c c√°c l·ªói tr∆∞·ªõc khi ti·∫øp t·ª•c.")
        print("\nG·ª£i √Ω:")
        print("  1. Ki·ªÉm tra l·∫°i Python version")
        print("  2. C√†i ƒë·∫∑t l·∫°i th∆∞ vi·ªán: pip install -r requirements.txt")
        print("  3. ƒê·ªçc k·ªπ th√¥ng b√°o l·ªói ·ªü tr√™n")
    
    print("=" * 70 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚úì ƒê√£ d·ª´ng ki·ªÉm tra.")
    except Exception as e:
        print(f"\n\n‚úó L·ªói nghi√™m tr·ªçng: {e}")
        import traceback
        traceback.print_exc()
